package entities.mobs;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import entities.components.AnimationComponent;
import graphics.Render;
import graphics.map.Map;
import graphics.sprites.Sprite;
import graphics.sprites.Spritesheet;

public class Unicorn extends Mob{
	
	private AnimationComponent leftAnim;
	private AnimationComponent rightAnim;
	List<Sprite> leftSprites;
	List<Sprite> rightSprites;
	
	public Spritesheet unicorn_sprites = new Spritesheet("res/spritesheets/unicorn_spritesheet.png", 32);
	
	public Sprite left_0 = new Sprite(unicorn_sprites, 16, 0, 1);
	public Sprite left_1 = new Sprite(unicorn_sprites, 16, 1, 1);
	
	public Sprite right_0 = new Sprite(unicorn_sprites, 16, 0, 0);
	public Sprite right_1 = new Sprite(unicorn_sprites, 16, 1, 0);
	
	
	private boolean animateY 	= false;
	private boolean animate		= true;
	private boolean side		= true;
	
	private Random random;
	private int nextX = 0;
	private int nextY = 0;
	private int spdX = 1;
	private int spdY = 1;
	private boolean dirX;
	private boolean dirY;
	private boolean canMoveUp;
	private boolean canMoveDown;
	private boolean canMoveRight;
	private boolean canMoveLeft;

	public Unicorn(int x, int y, int health, int dmg) {
		super(10 * 16, 10 * 16, health, dmg);
		
		leftSprites = new ArrayList<Sprite>();
		rightSprites = new ArrayList<Sprite>();
		
		leftSprites.add(left_0);
		leftSprites.add(left_1);
		
		rightSprites.add(right_0);
		rightSprites.add(right_1);
		
		leftAnim = new AnimationComponent(leftSprites, 2, true);
		rightAnim = new AnimationComponent(rightSprites, 2, true);
		leftAnim.printFirstFrame = false;
		
		addComponent(rightAnim);
		addComponent(leftAnim);
		
		random = new Random(System.currentTimeMillis());
	}
	
    public void mobRender(int delta, Render render){
    	
    	
    }
	
	public void mobUpdate(int delta, Map map){
		
		// moving and animation
				if(map.getTileAt( x / 16 , (y - 8) / 16).isSolid || y < 0 ){
					canMoveUp = false;
					dirY = true;
				} else {
					canMoveUp = true;
				}
				
				if(map.getTileAt( x/ 16 , (y + 8) / 16).isSolid || y > map.Height*16){
					canMoveDown = false;
					dirY = false;
				} else {
					canMoveDown = true;
				}
				
				if(map.getTileAt( (x+ 8)/ 16, y/ 16).isSolid || x > map.Width*16){
					canMoveRight = false;
					dirX = false;
				} else {
					canMoveRight = true;
				}
				
				if(map.getTileAt( (x-8)/ 16, y / 16).isSolid || x < 0){
					canMoveLeft = false;
					dirX = true;
				} else {
					canMoveLeft = true;
				}
		
		if(side){
			leftAnim.printFirstFrame = false;
			rightAnim.printFirstFrame = true;
			if(animateY || animate){
				leftAnim.triggered = false;
				rightAnim.triggered = true;
			}else{
				leftAnim.triggered = false;
				rightAnim.triggered = false;
			}
		}else{
			leftAnim.printFirstFrame = true;
			rightAnim.printFirstFrame = false;
			if(animateY || animate){
				leftAnim.triggered = true;
				rightAnim.triggered = false;
			}else{
				leftAnim.triggered = false;
				rightAnim.triggered = false;
			}
		}
		
		if(dirX){
			if(canMoveRight){
				this.x += spdX;
				side = true;
				if(spdX > 0){
					animate = true;
				}else{
					animate = false;
				}
			}
		}else{
			if(canMoveLeft){
				this.x -= spdX;
				side = false;
				if(spdX > 0){
					animate = true;
			    }else{
					animate = false;
				}
			}
		}
		
		if(dirY){
			if(canMoveDown){
				this.y += spdY;
				if(spdX > 0){
					animateY = true;
				}else{
					animateY = false;
				}
			}
		}else{
			if(canMoveUp){
				this.y -= spdY;
				if(spdX > 0){
					animateY = true;
				}else{
					animateY = false;
				}
			}
		}
		
		
		if(nextX == 0){
			nextX = random.nextInt(100) + 6;
			spdX = random.nextInt(2);
			dirX = random.nextBoolean();
		}else{
			nextX--;
		}
		
		if(nextY == 0){
			nextY = random.nextInt(100) + 6;
			spdY = random.nextInt(2);
			dirY = random.nextBoolean();
		}else{
			nextY--;
		}
	}
	

}
